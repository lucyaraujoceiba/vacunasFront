{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let HttpService = /*#__PURE__*/(() => {\n  class HttpService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    createDefaultOptions() {\n      return {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    optsName(name) {\n      return this.setHeader('xhr-name', name);\n    }\n\n    setHeader(name, value) {\n      const newopts = this.createDefaultOptions();\n      newopts.headers = newopts.headers.set(name, value);\n      return newopts;\n    }\n\n    createOptions(opts) {\n      const defaultOpts = this.createDefaultOptions();\n\n      if (opts) {\n        opts = {\n          params: opts.params || defaultOpts.params,\n          headers: opts.headers || defaultOpts.headers\n        };\n\n        if (!opts.headers.get('Content-Type')) {\n          opts.headers = opts.headers.set('Content-Type', defaultOpts.headers.get('Content-Type'));\n        }\n      }\n\n      return opts || defaultOpts;\n    }\n\n    doGet(serviceUrl, opts) {\n      const ropts = this.createOptions(opts);\n      console.log(serviceUrl);\n      return this.http.get(serviceUrl, ropts);\n    }\n\n    doPost(serviceUrl, body, opts) {\n      const ropts = this.createOptions(opts);\n      console.log(serviceUrl);\n      console.log(body);\n      return this.http.post(serviceUrl, body, ropts);\n    }\n\n    doDelete(serviceUrl, opts) {\n      const ropts = this.createOptions(opts);\n      return this.http.delete(serviceUrl, ropts);\n    }\n\n    doGetParameters(serviceUrl, parametros, opts) {\n      const ropts = this.createOptions(opts);\n      const options = parametros !== null ? {\n        headers: ropts.headers,\n        params: parametros\n      } : ropts;\n      return this.http.get(serviceUrl, options);\n    }\n\n  }\n\n  HttpService.ɵfac = function HttpService_Factory(t) {\n    return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  HttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpService,\n    factory: HttpService.ɵfac\n  });\n  return HttpService;\n})();","map":null,"metadata":{},"sourceType":"module"}